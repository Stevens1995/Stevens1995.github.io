<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hey there~</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://stevens1995.github.io/"/>
  <updated>2019-06-12T14:18:41.768Z</updated>
  <id>https://stevens1995.github.io/</id>
  
  <author>
    <name>动力小车</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Truly reactive programming with Svelte3.0</title>
    <link href="https://stevens1995.github.io/Truly-reactive-programming-with-Svelte3-0/"/>
    <id>https://stevens1995.github.io/Truly-reactive-programming-with-Svelte3-0/</id>
    <published>2019-05-30T07:18:47.000Z</published>
    <updated>2019-06-12T14:18:41.768Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文是一篇翻译过来的文章，原文地址：<a href="https://blog.logrocket.com/truly-reactive-programming-with-svelte-3-0-321b49b75969" target="_blank" rel="noopener">https://blog.logrocket.com/truly-reactive-programming-with-svelte-3-0-321b49b75969</a></p></blockquote><p><img src="https://cdn-images-1.medium.com/max/1200/1*2hDcp8VSEJk74trofc3JtQ.jpeg" alt="Svelte"></p><p>这个标题有点戏剧性，但是话又说回来，Svelte背后的想法正是如此。如果你还不知道Svelte是什么，那赶紧过来瞅瞅 — 你将会看到一场革命，并且Svelte将会取得最后的胜利（并不是在对Svelte团队施加压力哈😅）。</p><a id="more"></a><p>请注意本文并不是学习和使用Svelte的教程。Svelte团队已经提供了一份很棒的<a href="https://svelte.dev/tutorial/basics" target="_blank" rel="noopener">一步一步的互动式</a>教程，以便帮助你走进反应式编程的世界。</p><p><strong>免责声明</strong>：我不是编程界的摇滚明星，我不可能知道所有事情。我只是对每天发生的新鲜事情感到好奇，并且在我可以的时候分享- 于是就有了这篇文章。请带着一些怀疑的想法来看待这里我所说的事情，并且，如果我说了一些愚蠢的话，麻烦及时让我知道。</p><p>好嘞！让我们开始吧！💥</p><h2 id="首先-关于react">首先，关于React</h2><p>在我开始讨论为什么Svelte如此强大之前，我们先来看看Dan的一条推文，一段时间后我们再来看看其中表达的意思：</p><blockquote class="twitter-tweet" data-lang="zh-cn"><p lang="en" dir="ltr">React is not fully reactive</p>&mdash; Dan Abramov (@dan_abramov) <a href="https://twitter.com/dan_abramov/status/1025801430668664833?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">2018年8月4日</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p><strong>另一份免责声明</strong>：这篇文章也不是以任何方式批评和攻击React。我只是简单地决定用React作为一个学习案例，因为此文的大部分读者应该都用过一点React。React是跟Svelte对比的一个很好地案例。</p><p>Dan到底想表达什么，这对我们现在的编程方式有何影响呢？在回答这个问题前，让我简单地向你介绍下React背后的工作原理。</p><p>当你渲染一个React应用时，React保存了一份DOM的拷贝，称作<a href="https://reactjs.org/docs/faq-internals.html" target="_blank" rel="noopener">虚拟DOM</a>。虚拟DOM充当你的React代码和浏览器渲染DOM之间的中间人。</p><p>每当你的数据改变时（比如当你调用<code>this.setState</code>，<code>useState</code>），React做了一点工作来决定如何重绘屏幕上的UI。数据更新后，React会对比虚拟DOM和真实DOM，并且只更新两者间不同的地方。这样就避免了每次数据改变时都要重新渲染整个DOM。</p><p>现在，一切都变得很迅速，因为更新虚拟DOM比更新真实DOM所耗费的性能小很多，React只更新了真实DOM确实需要更新的部分。<a href="https://medium.com/@gethylgeorge/how-virtual-dom-and-diffing-works-in-react-6fc805f9f84e" target="_blank" rel="noopener">这篇</a>文章很好地讲述了整个过程。</p><p>但是！但是啊，聪明的你可能已经注意到了一些事情。那就是，如果你不告诉React你的数据发生了改变（比如，通过调用<code>this.setState</code>或者钩子函数），你的虚拟DOM就不会发生改变，React就不再react了。（ba dum tss! 🤓）（这句翻译不来…有点像 dumb ass…）</p><p>这就是Dan为什么说React不是完全reactive的原因。React依赖用户来跟踪应用中的数据，通过用来告诉自己数据发生了改变，但这对用户来说通常是额外的工作。</p><h2 id="ok-让我们来看看svelte">OK，让我们来看看Svelte</h2><p>Svelte提供一种全新的方式来搭建超级快速，高效，真正响应式行为的UI。没有虚拟DOM，并且代码行数比所有其他你用过框架或者包更少。</p><p>这听起来很棒，但是它与众多的JavaScript框架有什么不同呢？Let me show you 😏</p><h3 id="真正的反应式">真正的反应式</h3><p>Svelte不是一个包或者框架。Svelte是一个编译器，它接受原生的JavaScript代码，输出的Javascript也是直接与DOM交互，而不需要任何其他东西充当中介。</p><p>等一下？什么？一个编译器？（作者戏真多…）。 是的----- 一个编译器。这是一个非常棒的想法，我不明白为什么直到现在Svelte还不是很惹人注意，现在，让我来告诉你为什么Svelte是那么地酷炫。</p><p>以下是<a href="https://www.youtube.com/watch?v=AdNJ3fydeao" target="_blank" rel="noopener">Rich Harris在YGLF 2019年会议上的讲话</a>：</p><blockquote><p>Svelte 3.0将反应性从组件API移入语言中。<br>(Svelte 3.0 moves reactivity out of the component API and into the language.)</p></blockquote><p>这句话是什么意思呢？我们已经知道了React（以及很多其他的前端框架）需要你调用特定的API来告诉其数据发生了改变（通过调用<code>this.setState</code>或者<code>useState</code>）才能更新它的虚拟DOM。在React中，需要调用<code>this.setState</code>意味着你的应用的反应性其实是绑定在特定的API上，没有这些API，数据的改变并不会被注意到。</p><p>而Svelte通过另一种方式来实现反应性。</p><p>Svelte从<a href="">Observable</a>运行代码的方式中获取到了灵感，以拓扑代替从上至下的方式来运行代码。我们通过下面这段代码来看看什么是通过拓扑顺序来执行代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">   <span class="keyword">const</span> square =&gt; <span class="function"><span class="params">number</span> =&gt;</span> number * number;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">const</span> secondNumber = square(firstNumber);</span><br><span class="line">   <span class="keyword">const</span> firstNumber = <span class="number">42</span>;</span><br><span class="line"></span><br><span class="line">   <span class="built_in">console</span>.log(secondNumber);</span><br><span class="line">   &#125;)();</span><br></pre></td></tr></table></figure><p>如果你从上至下运行这段代码的话，解释到在第4行的时候，程序会报错。因为<code>secondNunmber</code>依赖于<code>firstNumber</code>，但<code>firstNumber</code>还没有被定义。但是如果程序以拓扑的方式来执行的话，程序不会报任何错误。为什么呢？以为编译器不会自上而下执行代码，而是会查看所有的变量从而生成一个依赖图（即谁被需要谁先被执行）</p><p>在上述的例子中，要理解编译器如果以拓扑的方式编译代码很简单：</p><ol><li><code>square</code>变量依赖其他变量吗？<br>-没有，初始化<code>square</code></li><li><code>secondNumber</code>依赖于其他变量吗？<br>-<code>secondNumber</code>依赖于<code>square</code>和<code>firstNumber</code>,<code>square</code>已经被初始化，但是<code>firstNumber</code>还没有被初始化，初始化<code>firstNumber</code></li><li>OK，<code>firstNumber</code>已经被初始化，现在可以用<code>firstNumber</code>和<code>square</code>来初始化<code>secondNumber</code><br>-还有其他的变量需要初始化吗？没有-执行代码</li></ol><p>乍一看，这段代码似乎依然是从上到下执行的，但是仔细看的话，你会发现实际上代码执行时会有一些跳转。</p><p>当代码执行到第四行时，编译器发现<code>firstNumber</code>并没有被定义，于是编译器暂停解释该语句，并且在你的代码中寻找该变量的定义。当找到<code>firstNumber</code>在第五行被定义后，第五行会先于第四行执行，当第五行执行完毕后，再返回执行第四行。</p><p><em><strong>TL;DR：如果语句A依赖于语句B，不管语句声明的顺序如何，B将先于A执行</strong></em></p><p>Svelte是如何应用上述的原理以实现真正的反应式呢？在Svelte中，你可以用一个标识符来表示一个语句，像这样：<code>$: foo = bar</code>。这样做之后，语句<code>foo = bar</code>就有了一个表示<code>$</code>（上述语句在严格模式下会报错）</p><p>当Svelte看到任何有<code>$</code>前缀的语句时，编译器就知道左边的变量由右边的变量导出。于是，现在我们有了将一个变量绑定在另一个变量的方法。</p><p>Reactivity!(反应式!)这意味着现在我们用JavaScript的原生API来实现真正的响应式，而无需再摆弄一些三方API，比如<code>this.setState</code>。</p><p>下面的代码是这样写的实际效果：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vanilla js</span></span><br><span class="line"><span class="keyword">let</span> foo = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> bar = foo + <span class="number">10</span>; <span class="comment">// bar is now 20</span></span><br><span class="line">foo = bar <span class="comment">// bar is still 20 (no reactivity)</span></span><br><span class="line">bar = foo + <span class="number">5</span> <span class="comment">// now bar becomes 25</span></span><br><span class="line"><span class="comment">// svelte js</span></span><br><span class="line"><span class="keyword">let</span> foo = <span class="number">10</span>;</span><br><span class="line">$: bar = foo + <span class="number">10</span>; <span class="comment">// bar is now 20</span></span><br><span class="line">foo = <span class="number">15</span> <span class="comment">// bar is now 25 because it is bound to the value of foo</span></span><br></pre></td></tr></table></figure><p>在上述的Svelte代码中，我们并不需要将<code>foo</code>的新值重新赋值给<code>bar</code>，代码会帮我们自动处理。当你把<code>foo</code>的值更改为15时，<code>bar</code>会自动更新为25。</p><p>上述的Svelte代码经过编译后，大概便变成这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">... omitted <span class="keyword">for</span> brevity ...</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">instance</span>(<span class="params">$$self, $$props, $$invalidate</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">let</span> foo = <span class="number">10</span>; <span class="comment">// bar is now 20</span></span><br><span class="line">   $$invalidate(<span class="string">'foo'</span>, foo = <span class="number">15</span>) <span class="comment">// bar is now 25 because it is bound to the value of foo</span></span><br><span class="line">   <span class="keyword">let</span> bar;</span><br><span class="line">   $$self.$$.update = <span class="function">(<span class="params">$$dirty = &#123; foo: <span class="number">1</span> &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="keyword">if</span> ($$dirty.foo) &#123; $$invalidate(<span class="string">'bar'</span>, bar = foo + <span class="number">19</span>); &#125;</span><br><span class="line">   &#125;;</span><br><span class="line">   <span class="keyword">return</span> &#123; bar &#125;;</span><br><span class="line"> &#125;</span><br><span class="line">... omitted <span class="keyword">for</span> brevity ...</span><br></pre></td></tr></table></figure><p><strong>花点时间认真看看上面的代码，真的，认真看下。</strong></p><p>你看到<code>foo</code>是如何更新的吗？即使是在<code>bar</code>没有被定义之前。（我暂时没看懂…）这是因为Svelte的编译器以拓扑的顺序来执行代码，而不是自上而下。</p><p>Svelte自动对数据的更新做出改变，而不需要用户关系改变的内容和时间，这一切都是自动进行的。用户可以专注于代码逻辑，让Svelte根据应用状态的改变来调节UI。</p><h3 id="简洁">简洁</h3><p>记得我说过Svelte可以用更少的代码来做到相同的工作吗？我是认真的！看看下面这个组件分别用Svelte和React实现的版本：</p><p><img src="https://i1.wp.com/cdn-images-1.medium.com/max/1600/1*y8KNWov5UwulVryUPq6srw@2x.png?ssl=1" alt="Svelte &amp;amp; React"></p><p><strong><strong>17行代码 vs 29行代码</strong></strong></p><p>上述两个应用实现的功能几乎完全一样，但是你可以看到在<code>React.js</code>中，我们不得不编写更多地代码 ---- <code>Angular</code>里面更过分。</p><p><img src="https://i2.wp.com/cdn-images-1.medium.com/max/1600/1*129rCsjvqwpczQ5Ld_U44A@2x.png?ssl=1" alt="Svelte &amp;amp; React"></p><p>Svelte简洁的代码除了看起来更方便之外，同时也更利于逻辑的判断和推理，因为代码中没有其他冗余的部分。我们不需要事件处理程序来更新input输入–简单的绑定就可以了。</p><p>假如你是一个刚刚入门的web开发者，哪一种方式学习起来更加简单？左边？还是右边？</p><p>或许你认为仅仅是少一点代码看起来很微不足道，但是当你所负责的项目变得越来越大，越来越复杂时，简洁的代码就变得很重要。我个人发现，有时候需要花费数个小时才能理解一个同事写的<code>React</code>组件。</p><h3 id="性能">性能</h3><p>OK，我们已经见识到了Svelte如何实现真正的反应式，并且让我们的代码更加简短和简洁。那么性能呢？如果用Svelte来编写完整的应用，用户体验如何？</p><p>一个让<code>React</code>如此强大的原因是<code>React</code>使用虚拟DOM来更新UI中很少的一部分，避免了每次数据改变时都重绘整个DOM。但是，这种方法有一个缺点是，当一个<code>React</code>组件改变时，<code>React</code>会重新渲染所有的子组件，不管子组件是否有重新渲染的必要。这就是为什么<code>React</code>提供了<code>shouldComponentUpdate</code>，<code>useMemo</code>，<code>React.PureComponent</code>等API。只要使用虚拟DOM来更新UI，这个问题就会一直存在。</p><p>Svelte没有使用虚拟DOM，那么她是如何根据应用的状态来同步更新UI的呢？让我再次引用Rich Harris的精彩YGLF演讲：</p><blockquote><p>Frameworks are not tools for organizing your code. They are tools for organizing your mind.<br>框架不是组织代码的工具，框架是用来组织你的思想的。</p></blockquote><p>正是上面的引用给Rich带来了框架能够在构建阶段运行的灵感，这样代码在运行时就不需要其他中介。这个灵感也导致了Svelte是编译器，而不是框架。</p><p>这个简单的想法正是Svelte如此快速的原因。Svelte将你的代码编译为更底层的高效的代码，直接与DOM交互。</p><p>上面这些都很棒，但是Svelte是如何避免数据改变时重绘整个DOM呢？Svelte与React的差异在于如何感知数据的改变。我们已经知道，<code>React</code>依赖于用户调用API来感知数据改变，而<code>Svelte</code>只需要简单的使用<code>=</code>就可以了。</p><p>如果一个变量—我们假设<code>foo</code>—通过<code>=</code>进行了更新，Svelte只会更新其他依赖于<code>foo</code>的变量。这允许Svelte只更新部分从<code>foo</code>变量中获取值的DOM。</p><p>关于其中的细节，可以看<a href="https://www.youtube.com/watch?v=AdNJ3fydeao" target="_blank" rel="noopener">Rich的解释</a></p><h2 id="最后一点想法">最后一点想法</h2><p>Svelte3.0是一段时间内发生的关于软件开发的最好的事情。有些人可以说这有些夸大其词，但是我不这么认为。Svelte背后的理念使得我们在向浏览器中引用更少的模板的同时，做更多的事情。应用也会因此变得更加高性能，更加轻便，同时代码也变得更加优雅和易读。那现在是不是Svelte可以马上取代React，Angular，Vue或者其他前端框架吗？</p><p>到目前为止，答案是否定的。相比于这些框架，Svelte相对来说还不是很成熟。它需要时间去成长，变得更加成熟，甚至解决一些目前我们还没有发现的问题。</p><p>就像<code>React</code>横空出世改变软件开发模式一样，Svelte也有可能改变我们关于框架的看法，在我们创建新的项目时提供无限可能。</p><p>最后，<strong>Happy Coding!</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;本文是一篇翻译过来的文章，原文地址：&lt;a href=&quot;https://blog.logrocket.com/truly-reactive-programming-with-svelte-3-0-321b49b75969&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.logrocket.com/truly-reactive-programming-with-svelte-3-0-321b49b75969&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/1200/1*2hDcp8VSEJk74trofc3JtQ.jpeg&quot; alt=&quot;Svelte&quot;&gt;&lt;/p&gt;&lt;p&gt;这个标题有点戏剧性，但是话又说回来，Svelte背后的想法正是如此。如果你还不知道Svelte是什么，那赶紧过来瞅瞅 — 你将会看到一场革命，并且Svelte将会取得最后的胜利（并不是在对Svelte团队施加压力哈😅）。&lt;/p&gt;
    
    </summary>
    
      <category term="翻译" scheme="https://stevens1995.github.io/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
      <category term="翻译" scheme="https://stevens1995.github.io/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="新鲜货" scheme="https://stevens1995.github.io/tags/%E6%96%B0%E9%B2%9C%E8%B4%A7/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript Clean Code - Best Practices</title>
    <link href="https://stevens1995.github.io/JavaScript-Clean-Code-Best-Practices/"/>
    <id>https://stevens1995.github.io/JavaScript-Clean-Code-Best-Practices/</id>
    <published>2019-05-27T07:48:50.000Z</published>
    <updated>2019-05-30T14:49:04.255Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文是一篇翻译过来的文章，原文地址：<a href="https://devinduct.com/blogpost/22/javascript-clean-code-best-practices" target="_blank" rel="noopener">https://devinduct.com/blogpost/22/javascript-clean-code-best-practices</a></p></blockquote><h2 id="介绍">介绍</h2><p>如果你关心代码本身以及代码是如何被编写的，而不是仅仅关心代码是否有效，你可以说你练习并且关心整洁的代码。一个专业的开发人员会为未来的自己以及其他人员编写代码，而不仅仅是为了机器。你所编写的任何代码都不会只被编写一次，相反，它会静静地等待下一个接手的人，并且让他头大。希望那个人不是你~</p><p>基于此，整洁的代码可以被定义为具有以下特征的代码：良好的可读性，便于被人所理解，易于修改和扩展。</p><a id="more"></a><p>问问你自己，有多少次你接手别人的工作时你的第一印象时下面的**<em>“WTF”</em>** 问题之一：</p><p><strong><em>&quot;WTF is that?&quot;</em></strong><br><strong><em>&quot;WTF did you do here?&quot;</em></strong><br><strong><em>&quot;WTF is this for?&quot;</em></strong></p><p>下面这张图片很好地展示了上述内容：<br><img src="https://camo.githubusercontent.com/2050cd696ecddcabad1380b1964c48a60597323e/687474703a2f2f7777772e6f736e6577732e636f6d2f696d616765732f636f6d6963732f7774666d2e6a7067" alt="WTF image"></p><p>**<em>Robert C. Martin(Uncle Bob)</em>**的一句话应该会让你思考你写代码的方式：</p><blockquote><p>虽然糟糕的代码也可以运行，但是如果代码不整洁，它会让开发组织陷入困境。<br>(Even bad code can function. But if the code isn’t clean, it can bring a development organization to its knees.)</p></blockquote><p>在这边文章中将会把注意力放在JavaScript上，但是文章中所说的一些原则也可以被应用在其他编程语言中。</p><h2 id="你真正来这阅读的部分-整洁代码-最佳实践">你真正来这阅读的部分-整洁代码 最佳实践</h2><h3 id="强类型检查">强类型检查</h3><p>使用 === 代替 ==</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// If not handled properly, it can dramatically affect the program logic. It's like, you expect to go left, but for some reason, you go right.</span></span><br><span class="line"><span class="number">0</span> == <span class="literal">false</span> <span class="comment">// true</span></span><br><span class="line"><span class="number">0</span> === <span class="literal">false</span> <span class="comment">// false</span></span><br><span class="line"><span class="number">2</span> == <span class="string">"2"</span> <span class="comment">// true</span></span><br><span class="line"><span class="number">2</span> === <span class="string">"2"</span> <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// example</span></span><br><span class="line"><span class="keyword">const</span> value = <span class="string">"500"</span>;</span><br><span class="line"><span class="keyword">if</span> (value === <span class="number">500</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">  <span class="comment">// it will not be reached</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (value === <span class="string">"500"</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">  <span class="comment">// it will be reached</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="变量">变量</h3><p>变量名应该能够解释变量背后的意图和作用，这样会使变量变得易于搜索和理解。</p><p>坏代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> daysSLV = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> y = <span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear();</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> ok;</span><br><span class="line"><span class="keyword">if</span> (user.age &gt; <span class="number">30</span>) &#123;</span><br><span class="line">  ok = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> MAX_AGE = <span class="number">30</span>;</span><br><span class="line"><span class="keyword">let</span> daysSinceLastVisit = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> currentYear = <span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear();</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> isUserOlderThanAllowed = user.age &gt; MAX_AGE;</span><br></pre></td></tr></table></figure><p>不要在变量名中添加额外的不必要的单词</p><p>坏代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> nameValue;</span><br><span class="line"><span class="keyword">let</span> theProduct;</span><br></pre></td></tr></table></figure><p>好代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name;</span><br><span class="line"><span class="keyword">let</span> product;</span><br></pre></td></tr></table></figure><p>不要让变量的含义依附上下文</p><p>坏代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> users = [<span class="string">"John"</span>, <span class="string">"Marco"</span>, <span class="string">"Peter"</span>];</span><br><span class="line">users.forEach(<span class="function"><span class="params">u</span> =&gt;</span> &#123;</span><br><span class="line">  doSomething();</span><br><span class="line">  doSomethingElse();</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="comment">// Here we have the WTF situation: WTF is `u` for?</span></span><br><span class="line">  register(u);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>好代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> users = [<span class="string">"John"</span>, <span class="string">"Marco"</span>, <span class="string">"Peter"</span>];</span><br><span class="line">users.forEach(<span class="function"><span class="params">user</span> =&gt;</span> &#123;</span><br><span class="line">  doSomething();</span><br><span class="line">  doSomethingElse();</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  register(user);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>不要添加不必要的上下文</p><p>坏代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">  userName: <span class="string">"John"</span>,</span><br><span class="line">  userSurname: <span class="string">"Doe"</span>,</span><br><span class="line">  userAge: <span class="string">"28"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">user.userName;</span><br></pre></td></tr></table></figure><p>好代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">  name: <span class="string">"John"</span>,</span><br><span class="line">  surname: <span class="string">"Doe"</span>,</span><br><span class="line">  age: <span class="string">"28"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">user.name;</span><br></pre></td></tr></table></figure><h3 id="函数">函数</h3><p>使用长的具有描述性的名字，考虑将函数名定义成一种行为。函数名应该是一个动词或者短语，并且完全暴露函数功能和变量名的作用。</p><p>坏代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">notif</span>(<span class="params">user</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// implementation</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">notifyUser</span>(<span class="params">emailAddress</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// implementation</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>避免使用过多的参数。理想的情况下，一个函数的变量不应该超过两个。函数的变量越少越容易进行测试。</p><p>坏代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUsers</span>(<span class="params">fields, fromDate, toDate</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// implementation</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUsers</span>(<span class="params">&#123; fields, fromDate, toDate &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// implementation</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getUsers(&#123;</span><br><span class="line">  fields: [<span class="string">'name'</span>, <span class="string">'surname'</span>, <span class="string">'email'</span>],</span><br><span class="line">  fromDate: <span class="string">'2019-01-01'</span>,</span><br><span class="line">  toDate: <span class="string">'2019-01-18'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>使用默认参数值代替条件语句</p><p>坏代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createShape</span>(<span class="params">type</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> shapeType = type || <span class="string">"cube"</span>;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createShape</span>(<span class="params">type = <span class="string">"cube"</span></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每个函数应该只做一件事情（SRP 单一职责原则）。避免在一个函数中执行过多的动作。</p><p>坏代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">notifyUsers</span>(<span class="params">users</span>) </span>&#123;</span><br><span class="line">  users.forEach(<span class="function"><span class="params">user</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> userRecord = database.lookup(user);</span><br><span class="line">    <span class="keyword">if</span> (userRecord.isVerified()) &#123;</span><br><span class="line">      notify(user);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">notifyVerifiedUsers</span>(<span class="params">users</span>) </span>&#123;</span><br><span class="line">  users.filter(isUserVerified).forEach(notify);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isUserVerified</span>(<span class="params">user</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> userRecord = database.lookup(user);</span><br><span class="line">  <span class="keyword">return</span> userRecord.isVerified();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>Object.assign</code>设置默认对象属性</p><p>坏代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> shapeConfig = &#123;</span><br><span class="line">  type: <span class="string">"cube"</span>,</span><br><span class="line">  width: <span class="number">200</span>,</span><br><span class="line">  height: <span class="literal">null</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createShape</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">  config.type = config.type || <span class="string">"cube"</span>;</span><br><span class="line">  config.width = config.width || <span class="number">250</span>;</span><br><span class="line">  config.height = config.width || <span class="number">250</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">createShape(shapeConfig);</span><br></pre></td></tr></table></figure><p>好代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> shapeConfig = &#123;</span><br><span class="line">  type: <span class="string">"cube"</span>,</span><br><span class="line">  width: <span class="number">200</span></span><br><span class="line">  <span class="comment">// Exclude the 'height' key</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createShape</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">  config = <span class="built_in">Object</span>.assign(</span><br><span class="line">    &#123;</span><br><span class="line">      type: <span class="string">"cube"</span>,</span><br><span class="line">      width: <span class="number">250</span>,</span><br><span class="line">      height: <span class="number">250</span></span><br><span class="line">    &#125;,</span><br><span class="line">    config</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">createShape(shapeConfig);</span><br></pre></td></tr></table></figure><p>不要在参数中设置flag，应该这些flag表明函数在做额外的操作。</p><p>坏代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createFile</span>(<span class="params">name, isPublic</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (isPublic) &#123;</span><br><span class="line">    fs.create(<span class="string">`./public/<span class="subst">$&#123;name&#125;</span>`</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    fs.create(name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createFile</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  fs.create(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPublicFile</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  createFile(<span class="string">`./public/<span class="subst">$&#123;name&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不要污染默认的全局对象，如果你需要扩展一个已经存在的对象，使用ES6中的类和继承，不要直接修改原生对象的原型链</p><p>坏代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.myFunc = <span class="function"><span class="keyword">function</span> <span class="title">myFunc</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// implementation</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>好代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SuperArray</span> <span class="keyword">extends</span> <span class="title">Array</span> </span>&#123;</span><br><span class="line">  myFunc() &#123;</span><br><span class="line">    <span class="comment">// implementation</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="条件语句">条件语句</h3><p>避免否定的条件语句</p><p>坏代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isUserNotBlocked</span>(<span class="params">user</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// implementation</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!isUserNotBlocked(user)) &#123;</span><br><span class="line">  <span class="comment">// implementation</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isUserBlocked</span>(<span class="params">user</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// implementation</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (isUserBlocked(user)) &#123;</span><br><span class="line">  <span class="comment">// implementation</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当确定值为Boolean而不是undefined或者null时，使用短的条件语句。这可能是很小的细节，但是却值得一提。</p><p>坏代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (isValid === <span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="comment">// do something...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (isValid === <span class="literal">false</span>) &#123;</span><br><span class="line">  <span class="comment">// do something...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (isValid) &#123;</span><br><span class="line">  <span class="comment">// do something...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!isValid) &#123;</span><br><span class="line">  <span class="comment">// do something...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>尽可能避免条件语句，使用继承和多态来代替</p><p>坏代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  getMaximumSpeed() &#123;</span><br><span class="line">    <span class="keyword">switch</span> (<span class="keyword">this</span>.type) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"Ford"</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.someFactor() + <span class="keyword">this</span>.anotherFactor();</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"Mazda"</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.someFactor();</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"McLaren"</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.someFactor() - <span class="keyword">this</span>.anotherFactor();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ford</span> <span class="keyword">extends</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  getMaximumSpeed() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.someFactor() + <span class="keyword">this</span>.anotherFactor();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mazda</span> <span class="keyword">extends</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  getMaximumSpeed() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.someFactor();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">McLaren</span> <span class="keyword">extends</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  getMaximumSpeed() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.someFactor() - <span class="keyword">this</span>.anotherFactor();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="es-类">ES 类</h3><p>Class是JavaScript中的语法糖，使用的也是原型继承。在代码中你应该使用ES6中的Class语法糖代码原生构造函数。</p><p>坏代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Person = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!(<span class="keyword">this</span> <span class="keyword">instanceof</span> Person)) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Instantiate Person with `new` keyword"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Person.prototype.sayHello = <span class="function"><span class="keyword">function</span> <span class="title">sayHello</span>(<span class="params"></span>) </span>&#123; <span class="comment">/**/</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Student = <span class="function"><span class="keyword">function</span>(<span class="params">name, school</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!(<span class="keyword">this</span> <span class="keyword">instanceof</span> Student)) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Instantiate Student with `new` keyword"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Person.call(<span class="keyword">this</span>, name);</span><br><span class="line">  <span class="keyword">this</span>.school = school;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Student.prototype = <span class="built_in">Object</span>.create(Person.prototype);</span><br><span class="line">Student.prototype.constructor = Student;</span><br><span class="line">Student.prototype.printSchoolName = <span class="function"><span class="keyword">function</span> <span class="title">printSchoolName</span>(<span class="params"></span>) </span>&#123; <span class="comment">/**/</span> &#125;;</span><br></pre></td></tr></table></figure><p>好代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  sayHello() &#123;</span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name, school) &#123;</span><br><span class="line">    <span class="keyword">super</span>(name);</span><br><span class="line">    <span class="keyword">this</span>.school = school;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  printSchoolName() &#123;</span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用方法链。包括JQuery和Lodash在内的很多包都使用了这种模式。这样做的好处是，你的代码会看起来更加简洁。在你的类中，简单地在方法中返回<code>this</code>关键字，你就可以将更多地类方法串接起来。</p><p>坏代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setSurname(surname) &#123;</span><br><span class="line">    <span class="keyword">this</span>.surname = surname;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setAge(age) &#123;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  save() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name, <span class="keyword">this</span>.surname, <span class="keyword">this</span>.age);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> Person(<span class="string">"John"</span>);</span><br><span class="line">person.setSurname(<span class="string">"Doe"</span>);</span><br><span class="line">person.setAge(<span class="number">29</span>);</span><br><span class="line">person.save();</span><br></pre></td></tr></table></figure><p>好代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setSurname(surname) &#123;</span><br><span class="line">    <span class="keyword">this</span>.surname = surname;</span><br><span class="line">    <span class="comment">// Return this for chaining</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setAge(age) &#123;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    <span class="comment">// Return this for chaining</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  save() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name, <span class="keyword">this</span>.surname, <span class="keyword">this</span>.age);</span><br><span class="line">    <span class="comment">// Return this for chaining</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> Person(<span class="string">"John"</span>)</span><br><span class="line">    .setSurname(<span class="string">"Doe"</span>)</span><br><span class="line">    .setAge(<span class="number">29</span>)</span><br><span class="line">    .save();</span><br></pre></td></tr></table></figure><h3 id="普遍的需要注意和避免的地方">普遍的需要注意和避免的地方</h3><p>一般来说，你应该尽可能地避免编写重复的代码，以及在代码中留下用不到的死代码。</p><p>你可能会因为各种原因在代码中编写冗余的代码。比如说，你有两个很相似的对象，彼此间只有一点点的不同。但是由于他们的不同点的本质，或者紧迫的项目排期，你不得不创建两个几乎拥有相同的代码的类或者函数。而想要去除这些冗余的代码意味着抽象出不同点，在更高的层次上来执行操作。</p><p>关于死代码，指的是那些再也用不到的代码，可能在项目开发的某个节点，你的一些决定让这些代码不再包含任何的用途。你应该在代码库中搜索并删除所有用不到的函数和代码块。我的一个建议是，一旦你决定某些代码不再被需要，马上删除它。否则你可能会忘记的~</p><p>下面这张图片表明了你看到一些死代码但是又不记得是否有作用时的感受：<br><a href="https://pics.me.me/sometimes-my-code-dont-know-what-it-does-but-i-49866360.png" target="_blank" rel="noopener">when you forget the purpose of dead code</a></p><h3 id="总结">总结</h3><p>上面所描述的只是你能的优化代码的一小部分。这里所描述的原则，是我个人看来人们经常不遵守的原则。人们尝试着去遵守这些原则，但是往往由于各种原因导致失败。可能在项目开始的时候，代码很简洁、整齐，但是当排期越来越近时，这些原则经常都会被忽略并且被移到**<em>&quot;TODO&quot;</em><strong>或者</strong><em>REFACTOR</em>**的部分。在这些时候，客户更关心的是排期的截止，而不是编写更加简洁的代码。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;本文是一篇翻译过来的文章，原文地址：&lt;a href=&quot;https://devinduct.com/blogpost/22/javascript-clean-code-best-practices&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://devinduct.com/blogpost/22/javascript-clean-code-best-practices&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id=&quot;介绍&quot;&gt;介绍&lt;/h2&gt;&lt;p&gt;如果你关心代码本身以及代码是如何被编写的，而不是仅仅关心代码是否有效，你可以说你练习并且关心整洁的代码。一个专业的开发人员会为未来的自己以及其他人员编写代码，而不仅仅是为了机器。你所编写的任何代码都不会只被编写一次，相反，它会静静地等待下一个接手的人，并且让他头大。希望那个人不是你~&lt;/p&gt;&lt;p&gt;基于此，整洁的代码可以被定义为具有以下特征的代码：良好的可读性，便于被人所理解，易于修改和扩展。&lt;/p&gt;
    
    </summary>
    
      <category term="翻译" scheme="https://stevens1995.github.io/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
      <category term="翻译" scheme="https://stevens1995.github.io/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="JavaScript" scheme="https://stevens1995.github.io/tags/JavaScript/"/>
    
  </entry>
  
</feed>
